
# coding: utf-8

# In[1]:


import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

import sys
import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
import numpy as np
np.random.seed(7)

print('Python version : ', sys.version)
print('TensorFlow version : ', tf.__version__)
print('Keras version : ', keras.__version__)


# In[2]:


img_rows = 28
img_cols = 28

(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

input_shape = (img_rows, img_cols, 1)
x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)

x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.

print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

batch_size = 128
num_classes = 10
epochs = 12

y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)


# In[4]:


import pickle

model_filename = "mnist_model.pkl"  
# Load from file
with open(model_filename, 'rb') as file:  
    mnist_model = pickle.load(file)


# In[15]:


model = Sequential()
model.add(Conv2D(32, kernel_size=(5, 5), strides=(1, 1), padding='same',
                 activation='relu',
                 input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Conv2D(64, (2, 2), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(1000, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))
model.summary()


# In[16]:


from IPython.display import SVG
from keras.utils.vis_utils import model_to_dot
get_ipython().run_line_magic('matplotlib', 'inline')

SVG(model_to_dot(model, show_shapes=True).create(prog='dot', format='svg'))


# In[17]:


model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
hist = model.fit(x_train, y_train,
                 batch_size=batch_size,
                 epochs=epochs,
                 verbose=1, 
                 validation_data=(x_test, y_test))


# In[18]:


score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])


# In[7]:


from matplotlib import pyplot as plt

n = 30

plt.imshow(x_test[n].reshape(28, 28), cmap='Greys', interpolation='nearest')
plt.show()

#print(x_test[n].reshape(1, 28, 28, 1))


print('The Answer is ', mnist_model.predict_classes(x_test[n].reshape((1, 28, 28, 1))))


# In[8]:


from matplotlib import pyplot as plt
n=36
img = [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0.,
  0.23921569, 0.6117647,  0.5803922,  0.34901962, 0.31764707, 0.6117647,
  1.,         0.99607843, 0.99607843, 0.99607843, 0.84705883, 0.6117647,
  0.5803922,  0.16078432, 0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.10196079,
  0.8117647,  0.99607843, 0.99215686, 0.99215686, 0.99215686, 0.9607843,
  0.91764706, 0.7647059,  0.9137255,  0.9137255,  0.9137255,  0.9647059,
  0.99215686, 0.94509804, 0.09411765, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.6509804,
  0.99215686, 0.99607843, 0.99215686, 0.99215686, 0.5019608,  0.1882353,
  0.,         0.,         0.,         0.,         0.,         0.1882353,
  0.8862745,  0.99215686, 0.34117648, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.01568628, 0.68235296, 0.9843137,
  0.99215686, 0.95686275, 0.4862745,  0.07450981, 0.00784314, 0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.8392157,  0.99215686, 0.07450981, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.5176471,  0.99215686, 0.99215686,
  0.69411767, 0.1764706,  0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.18039216,
  0.95686275, 0.99215686, 0.07450981, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.5019608,  0.7647059,  0.3529412,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.7019608,
  0.99607843, 0.59607846, 0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.03137255, 0.99607843,
  0.9843137,  0.28235295, 0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.64705884, 0.99607843,
  0.64705884, 0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.14509805, 0.972549,   0.99607843,
  0.18039216, 0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.3019608,  0.99215686, 0.67058825,
  0.03529412, 0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.07450981, 0.9372549,  0.99607843, 0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.00784314, 0.36078432, 0.99215686, 0.99215686, 0.84313726,
  0.8392157,  0.8392157,  0.70980394, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.07450981, 0.654902,   0.99215686, 0.99215686, 0.99215686, 0.99607843,
  0.99215686, 0.99215686, 0.8352941,  0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.7882353,  0.99215686, 0.99215686, 0.99215686, 0.7254902,  0.45882353,
  0.13333334, 0.07450981, 0.0627451,  0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.46666667, 0.28627452, 0.75686276, 0.92941177, 0.14117648, 0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.3137255,  0.99607843, 0.8392157,  0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.4627451,  0.99215686, 0.65882355, 0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.4627451,  0.99215686, 0.45882353, 0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.4627451,  0.99215686, 0.45882353, 0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.28235295, 0.75686276, 0.13333334, 0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]

plt.imshow(img, cmap='Greys', interpolation='nearest')
plt.show()

print('The answer is ', img.reshape(img, (1,28,28,1)))


# In[9]:


from matplotlib import pyplot as plt
n=36
img = [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0., 0.,  0.23921569, 0.6117647,  0.5803922,  0.34901962, 0.31764707, 0.6117647,  1.,         0.99607843, 0.99607843, 0.99607843, 0.84705883, 0.6117647, 0.5803922,  0.16078432, 0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.10196079,
  0.8117647,  0.99607843, 0.99215686, 0.99215686, 0.99215686, 0.9607843,
  0.91764706, 0.7647059,  0.9137255,  0.9137255,  0.9137255,  0.9647059,
  0.99215686, 0.94509804, 0.09411765, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.6509804,
  0.99215686, 0.99607843, 0.99215686, 0.99215686, 0.5019608,  0.1882353,
  0.,         0.,         0.,         0.,         0.,         0.1882353,
  0.8862745,  0.99215686, 0.34117648, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.01568628, 0.68235296, 0.9843137,
  0.99215686, 0.95686275, 0.4862745,  0.07450981, 0.00784314, 0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.8392157,  0.99215686, 0.07450981, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.5176471,  0.99215686, 0.99215686,
  0.69411767, 0.1764706,  0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.18039216,
  0.95686275, 0.99215686, 0.07450981, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.5019608,  0.7647059,  0.3529412,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.7019608,
  0.99607843, 0.59607846, 0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.03137255, 0.99607843,
  0.9843137,  0.28235295, 0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.64705884, 0.99607843,
  0.64705884, 0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.14509805, 0.972549,   0.99607843,
  0.18039216, 0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.3019608,  0.99215686, 0.67058825,
  0.03529412, 0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.07450981, 0.9372549,  0.99607843, 0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.00784314, 0.36078432, 0.99215686, 0.99215686, 0.84313726,
  0.8392157,  0.8392157,  0.70980394, 0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.07450981, 0.654902,   0.99215686, 0.99215686, 0.99215686, 0.99607843,
  0.99215686, 0.99215686, 0.8352941,  0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.7882353,  0.99215686, 0.99215686, 0.99215686, 0.7254902,  0.45882353,
  0.13333334, 0.07450981, 0.0627451,  0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.46666667, 0.28627452, 0.75686276, 0.92941177, 0.14117648, 0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.3137255,  0.99607843, 0.8392157,  0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.4627451,  0.99215686, 0.65882355, 0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.4627451,  0.99215686, 0.45882353, 0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.4627451,  0.99215686, 0.45882353, 0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.28235295, 0.75686276, 0.13333334, 0.,         0.,
  0.,         0.,         0.,         0.,         0.,         0.,
  0.,         0.,         0.,         0.        ],
 [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]

plt.imshow(img, cmap='Greys', interpolation='nearest')
plt.show()

print(img)

print(np.reshape(img, (1, 28, 28, 1)))

print('The answer is ', model.predict_classes(np.reshape(img, (1,28,28,1))))


# In[15]:


import random

predicted_result = model.predict(x_test)
predicted_labels = np.argmax(predicted_result, axis=1)

test_labels = np.argmax(y_test, axis=1)

wrong_result = []

for n in range(0, len(test_labels)):
    if predicted_labels[n] != test_labels[n]:
        wrong_result.append(n)

print('total test images= ', len(test_labels), ', wrong predictions= ', len(wrong_result), ', accuracy= ', len(wrong_result)/len(test_labels))
        
samples = random.choices(population=wrong_result, k=16)

count = 0
nrows = ncols = 4

plt.figure(figsize=(12,8))

for n in samples:
    count += 1
    plt.subplot(nrows, ncols, count)
    plt.imshow(x_test[n].reshape(28, 28), cmap='Greys', interpolation='nearest')
    tmp = "Label:" + str(test_labels[n]) + ", Prediction:" + str(predicted_labels[n])
    plt.title(tmp)

plt.tight_layout()
plt.show()


# In[42]:


from matplotlib import pyplot as plt

img = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 150, 253, 202, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 251, 251, 253, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 197, 251, 251, 253, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 190, 251, 251, 251, 253, 169, 109, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 251, 251, 251, 251, 253, 251, 251, 220, 51, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 253, 253, 253, 253, 234, 222, 253, 253, 253, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 63, 221, 253, 251, 251, 251, 147, 77, 62, 128, 251, 251, 105, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 32, 231, 251, 253, 251, 220, 137, 10, 0, 0, 31, 230, 251, 243, 113, 5, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 37, 251, 251, 253, 188, 20, 0, 0, 0, 0, 0, 109, 251, 253, 251, 35, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 37, 251, 251, 201, 30, 0, 0, 0, 0, 0, 0, 31, 200, 253, 251, 35, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 37, 253, 253, 0, 0, 0, 0, 0, 0, 0, 0, 32, 202, 255, 253, 164, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 140, 251, 251, 0, 0, 0, 0, 0, 0, 0, 0, 109, 251, 253, 251, 35, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 217, 251, 251, 0, 0, 0, 0, 0, 0, 21, 63, 231, 251, 253, 230, 30, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 217, 251, 251, 0, 0, 0, 0, 0, 0, 144, 251, 251, 251, 221, 61, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 217, 251, 251, 0, 0, 0, 0, 0, 182, 221, 251, 251, 251, 180, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 218, 253, 253, 73, 73, 228, 253, 253, 255, 253, 253, 253, 253, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 113, 251, 251, 253, 251, 251, 251, 251, 253, 251, 251, 251, 147, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 31, 230, 251, 253, 251, 251, 251, 251, 253, 230, 189, 35, 10, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 62, 142, 253, 251, 251, 251, 251, 253, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 174, 251, 173, 71, 72, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

img2 = []
for i in range(len(img)):
  img[i] = img[i]/256.0
  img2.append(1.0-img[i])

print(img)
print(img2)

plt.imshow(np.reshape(img, (28,28)), cmap='Greys', interpolation='nearest')
plt.show()
plt.imshow(np.reshape(img2, (28,28)), cmap='Greys', interpolation='nearest')
plt.show()

print(model.predict_classes(np.reshape(img, (1,28,28,1))))
print(model.predict_classes(np.reshape(img2, (1,28,28,1))))

